## https://github.com/turlucode/ros-docker-gui
# cannot display¤Î¤È¤­$ xhost local:root
# $ docker run ***
# $ source catkin_ws/devel/setup.zsh
# $ echo export PATH='/usr/local/cuda/bin:$PATH' >> ~/.zshrc && source ~/.zshrc && nvcc -V
# Terminator command
# 1. [Ctrl]+[Shift]+o,[Ctrl]+[Shift]+e, »­Ãæ¿k£¨ºá£©·Ö¸î
# 2. [Ctrl]+d, ÏûÈ¥


docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority turlucode/ros-kinetic:cuda10-cudnn7-opencv3

docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority -v $HOME/coding/ros_beg:/root/catkin_ws turlucode/ros-kinetic:cuda10-cudnn7-opencv3

# SUCCESS nvcc -V
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority -v $HOME/coding/ros_beg:/root/ turlucode/ros-kinetic:cuda10-cudnn7-opencv3

# SUCCESS nvcc -V
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority -v $HOME/coding/ros_beg:/root/coding -w /root/coding/ turlucode/ros-kinetic:cuda10-cudnn7-opencv3

### SUCCESS nvcc -V
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority -v ${PWD}:/root/ turlucode/ros-kinetic:cuda10-cudnn7-opencv3

# SUCCESS
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority -v ${PWD}:/rintaro/ turlucode/ros-kinetic:cuda10-cudnn7-opencv3


docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority -v ${PWD}:/root/rintaro/ turlucode/ros-kinetic:cuda10-cudnn7-opencv3


# USER
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/$(id -un)/.Xauthority -e XAUTHORITY=/home/$(id -un)/.Xauthority -e DOCKER_USER_NAME=$(id -un) -e DOCKER_USER_ID=$(id -u) -e DOCKER_USER_GROUP_NAME=$(id -gn) -e DOCKER_USER_GROUP_ID=$(id -g) -e ROS_IP=127.0.0.1 -w /home/ -v ${PWD}:/home/docker turlucode/ros-kinetic:cuda10-cudnn7-opencv3

docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/$(id -un)/.Xauthority -e XAUTHORITY=/home/$(id -un)/.Xauthority -e DOCKER_USER_NAME=$(id -un) -e DOCKER_USER_ID=$(id -u) -e DOCKER_USER_GROUP_NAME=$(id -gn) -e DOCKER_USER_GROUP_ID=$(id -g) -e ROS_IP=127.0.0.1 turlucode/ros-kinetic:cuda10-cudnn7-opencv3

docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/$(id -un)/.Xauthority -e XAUTHORITY=/home/$(id -un)/.Xauthority -e DOCKER_USER_NAME=$(id -un) -e DOCKER_USER_ID=$(id -u) -e DOCKER_USER_GROUP_NAME=$(id -gn) -e DOCKER_USER_GROUP_ID=$(id -g) -e ROS_IP=127.0.0.1 -v ${PWD}:/home/$(id -un)/docker_rin turlucode/ros-kinetic:cuda10-cudnn7-opencv3


docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/$(id -un)/.Xauthority -e XAUTHORITY=/home/$(id -un)/.Xauthority -e DOCKER_USER_NAME=$(id -un) -e DOCKER_USER_ID=$(id -u) -e DOCKER_USER_GROUP_NAME=$(id -gn) -e DOCKER_USER_GROUP_ID=$(id -g) -e ROS_IP=127.0.0.1 -v $HOME/coding/:/home/$(id -un)/coding turlucode/ros-kinetic:cuda8-cudnn6-opencv3

# non mount
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/$(id -un)/.Xauthority -e XAUTHORITY=/home/$(id -un)/.Xauthority -e DOCKER_USER_NAME=$(id -un) -e DOCKER_USER_ID=$(id -u) -e DOCKER_USER_GROUP_NAME=$(id -gn) -e DOCKER_USER_GROUP_ID=$(id -g) -e ROS_IP=127.0.0.1 turlucode/ros-kinetic:cuda10-cudnn7-opencv3

# non mount root
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host \
-v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY \
-v $HOME/.Xauthority:/root/.Xauthority -e XAUTHORITY=/root/.Xauthority \
-e ROS_IP=127.0.0.1 \
turlucode/ros-kinetic:cuda10-cudnn7-opencv3

#2021/0709#best#nicest ever# 0728#this one is the best
docker run --rm -it --runtime=nvidia --privileged --net=host --ipc=host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/home/$(id -un)/.Xauthority -e XAUTHORITY=/home/$(id -un)/.Xauthority -e DOCKER_USER_NAME=$(id -un) -e DOCKER_USER_ID=$(id -u) -e DOCKER_USER_GROUP_NAME=$(id -gn) -e DOCKER_USER_GROUP_ID=$(id -g) -e ROS_IP=127.0.0.1 -v $HOME/coding/:/home/$(id -un)/coding turlucode/ros-kinetic:cuda10-cudnn7-opencv3

python add_pointclouds_to_bagfile.py rgbd_dataset_freiburg1_desk-2hz-with-pointclouds.bag pcl.bag











# OpenCV + CUDA, exclude ROS
# FAIL
docker run --rm -it --runtime=nvidia -v $HOME/coding/:/opt rin/cuda:10.1-cudnn7-ubuntu18.04-opencv4.4.0


# SUCCESS
docker build -t rin/cuda:10.1-cudnn7-ubuntu18.04-opencv4.1.0-CC5.2 ./
docker run --rm -it --runtime=nvidia -v $HOME/coding/:/opt rin/cuda:10.1-cudnn7-ubuntu18.04-opencv4.1.0-CC5.2

## docker run --rm -it --runtime=nvidia -v $HOME/coding/:/opt rin/cuda:10.1-cudnn7-ubuntu18.04-opencv3.4.11-CC5.2


# SUCCESS
docker run --rm -it --runtime=nvidia -v $HOME/coding/:/opt rin/cuda:10.1-cudnn7-ubuntu18.04-opencv3.4.11-CC5.0


# SUCCESS
docker run --rm -it --runtime=nvidia --cap-add=SYS_PTRACE --security-opt="seccomp=unconfined" -v $HOME/coding/:/opt rin/cuda:10.1-cudnn7-ubuntu18.04-opencv3.4.11-CC5.0-gdb


$ docker images | head